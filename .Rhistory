plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0, bty="n") #左下图，图例无框线
plot(H1$Time_o, as.numeric(H1$Voltage),type="l", xlab="datatime", ylab="Voltage") #右上图
plot(H1$Time_o, as.numeric(H1$ Global_reactive_power),type="l", xlab="datatime", ylab=" Global_reactive_power") #右下图
dev.copy(png, file = "plot4.png", width = 480, height = 480, units = "px")
dev.off()
par(mfcol = c(2, 2), mar = c(5, 4, 2, 2), oma = c(0, 0, 0, 0)) #布局
plot(H1$Time_o, as.numeric(H1$Global_active_power),type="l", xlab="", ylab="Global Active Power") #左上图，y轴文字略不同
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0, bty="n") #左下图，图例无框线
plot(H1$Time_o, as.numeric(H1$Voltage),type="l", xlab="datatime", ylab="Voltage") #右上图
plot(H1$Time_o, as.numeric(H1$ Global_reactive_power),type="l", xlab="datatime", ylab=" Global_reactive_power") #右下图
par(mfcol = c(2, 2), mar = c(5, 4, 2, 2), oma = c(0, 0, 0, 0)) #布局
plot(H1$Time_o, as.numeric(H1$Global_active_power),type="l", xlab="", ylab="Global Active Power") #左上图，y轴文字略不同
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0, bty="n") #左下图，图例无框线
plot(H1$Time_o, as.numeric(H1$Voltage),type="l", xlab="datatime", ylab="Voltage") #右上图
plot(H1$Time_o, as.numeric(H1$ Global_reactive_power),type="l", xlab="datatime", ylab=" Global_reactive_power") #右下图
dev.copy(png, file = "plot4.png", width = 480, height = 480, units = "px")
dev.off()
submit()
library(data.table)
HPC <- fread("./ExData_Plotting1/household_power_consumption.txt", sep=";", na.strings="?")
H1 <- subset(HPC, Date=="1/2/2007" | Date=="2/2/2007")
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0) #鍥句緥锛宭ty绾挎潯锛宼ext.font瀛椾綋/澶у皬锛屽悜宸﹁皟鏁达紙閬垮厤鏄剧ず涓嶅畬鏁达級鈥斺€旀樉绀烘甯革紝淇濆瓨涓簆ng鍚庝粛琚垏鏂?
dev.copy(png, file = "./ExData_Plotting1/plot3.png", width = 480, height = 480, units = "px")
dev.off()
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
H1[,Time_o:=as.POSIXct(paste(as.Date(H1$Date,format="%d/%m/%Y"),H1$Time))]
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0) #鍥句緥锛宭ty绾挎潯锛宼ext.font瀛椾綋/澶у皬锛屽悜宸﹁皟鏁达紙閬垮厤鏄剧ず涓嶅畬鏁达級鈥斺€旀樉绀烘甯革紝淇濆瓨涓簆ng鍚庝粛琚垏鏂?
dev.copy(png, file = "./ExData_Plotting1/plot3.png", width = 480, height = 480, units = "px")
dev.off()
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0) #鍥句緥锛宭ty绾挎潯锛宼ext.font瀛椾綋/澶у皬锛屽悜宸﹁皟鏁达紙閬垮厤鏄剧ず涓嶅畬鏁达級鈥斺€旀樉绀烘甯革紝淇濆瓨涓簆ng鍚庝粛琚垏鏂?
dev.copy(png, file = "plot3.png", width = 480, height = 480, units = "px")
dev.off()
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0)
window()
windows()
window()
rm(allsam)
rm(dat)
rm(deck)
rm(fs)
rm(sleep)
rm(coverage)
rm(den)
rm(dice_fair)
rm(dice_high)
rm(dice_low)
rm(dice_sqr)
rm(difference)
rm(edh)
rm(edl)
rm(ex2_fair)
rm(fname)
rm(g)
rm(g1)
rm(g2)
rm(k)
rm(lamb)
rm(lambdavals)
rm(md)
rm(mn)
rm(nosim)
rm(np)
rm(n)
rm(n1)
rm(n2)
rm(ns)
rm(nsim)
rm(num)
rm(mydf)
rm(mybin)
rm(my_z)
rm(my_x)
rm(my_y)
rm(s)
rm(sam0)
rm(sam1)
rm(sam2)
rm(sam3)
rm(sam4)
rm(sam)
rm(sam5)
rm(sam6)
rm(sam7)
rm(sam8)
rm(sam9)
rm(samsz)
rm(sameans)
rm(smeans)
rm(sp)
rm(spop)
rm(suits)
rm(quants)
rm(pvals)
rm(t)
rm(x)
rm(y)
rm(xvals)
rm(values)
rm(ACCompar
)
rm(cfunc)
rm(coinPlot)
rm(deal)
rm(fxfer)
rm(hand)
rm(myfunc)
rm(mypdf)
rm(mywald)
rm(pathtofile)
rm(expet_dice)
rm(expect_dice)
rm(mypolt)
rm(myplot)
rm(myplot2)
H1[,Time_o:=as.POSIXct(paste(as.Date(H1$Date,format="%d/%m/%Y"),H1$Time))]
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0)
dev.copy(png, file = "./ExData_Plotting1/plot3.png", width = 480, height = 480, units = "px")
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
> lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
> lines(H1$Time_o, as.numeric(H1$Sub_metering_3) , col = "blue")
> legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), text.font=1, xjust=0)
plot(H1$Time_o, as.numeric(H1$Sub_metering_1),type="l", xlab="", ylab=" Energy sub metering")
lines(H1$Time_o, as.numeric(H1$Sub_metering_2) , col = "red")
rm(list=ls())
library(swirl)
install_from_swirl("Regression Models")
swirl
swirl()
head(pValues)
sum(pValues<.05)
play()
?p.adjust
nxt()
p.adjust(pValues, method = "bonferroni", n = sum(pValues<.05))
p.adjust(pValues, method = "bonferroni")
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStauts)
table(pValues2<.05, trueStatus)
0/500
24/500
table(pValues2<.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
1*1/6+2*1/6+3*1/6+4*1/6+5*1/6+6*1/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace=TRUE)
resam <- matrix(sam, row=B, col=nh)
resam <- matrix(sam, rows=B, cols=nh)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
fh-meds
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quntile(resampledMedians, c(.025, .0975))
quantile(resampledMedians, c(.025, .0975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
rangeBdata$count)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdat$count)-mean(Cdat$count)
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms<- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent, galton)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
varChild == varRes + varEst
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor, gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((mu-galton$child)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sTot)
sRes <- deviance(galton)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(children~parents, galton)^2
cor(children, parents, galton)^2
cor(galton$child, galton$parent)^2
?jitter
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
all
summary(all)
all <- lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec, swiss)
all - efit
all$$coef - efit$coef
all$coef - efit$coef
all$coefficients-efit$coefficients
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- mean(x)
sum(w*(x-mu)^2)
sum(w*(x-1.077)^2)
sum(w*(x-.1471)^2)
sum(w*(x-0.300)^2)
lm(w~x)
lm(x~w)
lm(w~x-1)
lm(x~w-1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y,x)
lm(y~x)
lm(x~y)
summary(lm(y~x))
data(mtcars)
lm(mpg~weight, mtcars)
lm(mpg~wt, mtcars)
summary(lm(mpg~wt, mtcars))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- c(1,1,1,1,1)
rm(y)
mu <- mean(x)
sd <- sd(x)
y <- (x-mu)/sd
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
sd <- sd(x)
y <- (x-mu)/sd
sum((x-0.573)^2)
sum((x-0.8)^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x-1))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x*w)
sum(x*w)
mu <- mean(x*w)
mu <- mean(x*w*w)
mu <- mean(x*w)
mean(w*(x-mu))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- mean(x*w)
mean(w*(x-mu)^2)
sum(w)
sum(x*w)/sum(w)
library(lattice)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1)) ## Plot with 2 panels
library(ggplot2)
str(mpg)
qplot(displ,
hwy,
data=
mpg)
qplot(displ,
hwy,
data=
mpg, color=drv)
qplot(displ,
hwy,
data=
mpg,
geom
=
c("point",
"smooth"))
qplot(displ,hwy,data=mpg, facets=.~drv)
qplot(displ,hwy,data=mpg, facets=drv~., binwidth=2))
qplot(displ,hwy,data=mpg, facets=drv~., binwidth=2)
?qplot
qplot(displ,hwy,data=mpg, facets=drv~.)
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(lattice)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
?xyplot
?splom
splom(weight, BodyWeight)
splom(BodyWeight$weight, BodyWeight)
splom(BodyWeight$Time, BodyWeight)
summary(BodyWeight)
splom(BodyWeight$Rat, BodyWeight)
splom(BodyWeight$Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(votes, rating, data = movies)
library(swirl)
rm(list=ls())
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
xA
sA
InsectSprays[,2]
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count~spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1, InsectSprays)
summary(nfit)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray, spray2)
fit2 <- lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric~Year, hunger$Sex=="Female")
lmF <- lm(Numeric~Year, x[hunger$Sex=="Female"])
lmF <- lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"])
lmF <- lm(Numeric~Year, hunger[hunger$Sex=="Female"])
play()
hunger$Sex=="Female"
x[hunger$Sex=="Female"]
hunger[hunger$Sex=="Female"]
hunger[[hunger$Sex=="Female"]]
hunger[,[hunger$Sex=="Female"]]
hunger[[hunger$Sex=="Female"],]
Numeric[hunger$Sex=="Female"]
hunger$Numeric[hunger$Sex=="Female"]
nxt()
lmF <- lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric~Year+Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
par(mar = c(5,4,1,1), las = 1)
plot(x, y, main = "My Simulated Data")
rm(list=ls())
setwd("./git/RepData_PeerAssessment1")
act <- read.csv("activity.csv")
act$interval <- as.factor(act$interval)
dlist <- levels(act$date)
ilist <- levels(act$interval)
sum_day <- sapply(split(act$steps, act$date), sum)
mean_day <- sapply(split(act$steps, act$date), mean)
mean_day
mean_day <- sapply(split(na.omit(act$steps), act$date), mean)
mu_day <- mean(na.omit(sum_day)); mu_day
md_day <- median(na.omit(sum_day)); md_day
mean_i <- as.data.frame(sapply(split(na.omit(act$steps), act$interval), mean))
interval_mean <- cbind(mean_i, ilist)
names(interval_mean)<-c("mean","interval")
library(lattice)
xyplot(interval, mean, data=interval_mean, type="l")
xyplot(mean~interval, data=interval_mean, type="l")
interval_mean[order(interval_mean$mean),]
interval_mean[order(-interval_mean$mean),]
interval_mean[order(-interval_mean$mean),][1]
interval_mean[order(-interval_mean$mean),][[1]]
interval_mean[order(-interval_mean$mean),][1,2]
interval_mean[order(-interval_mean$mean),][1,]
na <- na.omit(act)
dim(act)[1]-dim(na)[1]
act1 <- read.csv("activity.csv")
for (i in 1: nrow(act1))
if (is.na(act1$steps[i]))
for (j in 1:288)
if (row.names(mean_i)[j]== act1$interval[i]) {
act1$steps[i] <- mean_i[j,];
break
}
View(act1)
View(act)
View(act1)
sum_day1 <- sapply(split(act1$steps, act1$date), sum)
hist(sum_day1)
mu_day1 <- mean(sum_day1); mu_day1
md_day1 <- median(sum_day1); md_day1
library(lubridate)
act1 <- cbind(act1, wday=c("weekday","weekend"))
for (i in 1:nrow(act1))
if (wday(act1$date[i])>1 & wday(act1$date[i])<7)
{act1$wday[i]="weekday"}
else {act1$wday[i]="weekend"}
for (i in 1:nrow(act1)){
if (wday(act1$date[i])>1 & wday(act1$date[i])<7)
{act1$wday[i]="weekday"}
else {act1$wday[i]="weekend"}}
View(act1)
View(act1)
xyplot(steps ~interval | wday, , data=act1, layout =c(1,2), type="l")
tail(act1)
xyplot(steps ~wday , data=act1, type="l")
xyplot(steps ~wday , data=act1)
xyplot(steps ~interval | wday, , data=act1, layout =c(1,2), type="l")
